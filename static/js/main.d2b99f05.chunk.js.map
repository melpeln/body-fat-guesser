{"version":3,"sources":["colors.js","index.js"],"names":["COLORS","white","black","img_bg","dark_blue","tf","require","names","Header","react_default","a","createElement","className","React","Component","App","state","model","preview","predictions","onDrop","accepted","rejected","links","_this","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","onImageChange","e","c","document","getElementById","getContext","target","_this$state$model$inp","inputs","shape","slice","_this$state$model$inp2","Object","slicedToArray","modelWidth","modelHeight","input","tidy","resizeBilinear","browser","fromPixels","div","expandDims","executeAsync","then","res","font","textBaseline","i","_res","boxes","scores","classes","valid_detections","boxes_data","dataSync","scores_data","classes_data","valid_detections_data","dispose","_boxes_data$slice","_boxes_data$slice2","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","_boxes_data$slice3","_boxes_data$slice4","fillText","_this2","this","loadGraphModel","build_default","accept","multiple","alt","onLoad","src","id","color","titleElement","ReactDOM","render","src_Header","rootElement","src_App"],"mappings":"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","file":"static/js/main.d2b99f05.chunk.js","sourcesContent":["export const COLORS = {\n    white: '#ffffff',\n    black: '#000000',\n    img_bg: '#d2ff40',\n    dark_blue: '#0b0e14'\n    // your colors\n  }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MagicDropzone from \"react-magic-dropzone\";\nimport {COLORS} from \"./colors.js\"\n\nimport \"./styles.css\";\nconst tf = require('@tensorflow/tfjs');\n\nconst weights = '/web_model/model.json';\n\nconst names = ['0_9', '10_11', '12_13', '14_15', '16_17', '18_20', '20_100']\n\n\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <h1 className=\"title\">BODY FAT GUESSER</h1>\n    );\n  }\n}\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: \"\",\n    predictions: []\n  };\n\n  componentDidMount() {\n    tf.loadGraphModel(weights).then(model => {\n      this.setState({\n        model: model\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  cropToCanvas = (image, canvas, ctx) => {\n    const naturalWidth = image.naturalWidth;\n    const naturalHeight = image.naturalHeight;\n\n    // canvas.width = image.width;\n    // canvas.height = image.height;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = COLORS.img_bg; // for the image square background\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const ratio = Math.min(canvas.width / image.naturalWidth, canvas.height / image.naturalHeight);\n    const newWidth = Math.round(naturalWidth * ratio);\n    const newHeight = Math.round(naturalHeight * ratio);\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      naturalWidth,\n      naturalHeight,\n      (canvas.width - newWidth) / 2,\n      (canvas.height - newHeight) / 2,\n      newWidth,\n      newHeight,\n    );\n\n  };\n\n  onImageChange = e => {\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    this.cropToCanvas(e.target, c, ctx);\n    let [modelWidth, modelHeight] = this.state.model.inputs[0].shape.slice(1, 3);\n    const input = tf.tidy(() => {\n      return tf.image.resizeBilinear(tf.browser.fromPixels(c), [modelWidth, modelHeight])\n        .div(255.0).expandDims(0);\n    });\n    this.state.model.executeAsync(input).then(res => {\n      // Font options.\n      const font = \"16px sans-serif\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n\n      const [boxes, scores, classes, valid_detections] = res;\n      const boxes_data = boxes.dataSync();\n      const scores_data = scores.dataSync();\n      const classes_data = classes.dataSync();\n      const valid_detections_data = valid_detections.dataSync()[0];\n\n      tf.dispose(res)\n\n      var i;\n      for (i = 0; i < valid_detections_data; ++i){\n        let [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        x2 *= c.width;\n        y1 *= c.height;\n        y2 *= c.height;\n        const width = x2 - x1;\n        const height = y2 - y1;\n        const klass = names[classes_data[i]];\n        const score = scores_data[i].toFixed(2);\n\n        // Draw the bounding box.\n        ctx.strokeStyle = COLORS.img_bg;\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x1, y1, width, height);\n\n        // Draw the label background.\n        ctx.fillStyle = COLORS.img_bg;\n        const textWidth = ctx.measureText(klass + \":\" + score).width;\n        const textHeight = parseInt(font, 10); // base 10\n        ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n\n      }\n      for (i = 0; i < valid_detections_data; ++i){\n        let [x1, y1, , ] = boxes_data.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        y1 *= c.height;\n        const klass = names[classes_data[i]];\n        const score = scores_data[i].toFixed(2);\n\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = COLORS.dark_blue;\n        ctx.fillText(klass + \":\" + score, x1, y1);\n\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            {this.state.preview ? (\n              <img\n                alt=\"upload preview\"\n                onLoad={this.onImageChange}\n                className=\"Dropzone-img\"\n                src={this.state.preview}\n              />\n            ) : (\n              \"Choose or drop a file.\"\n            )}\n            <canvas id=\"canvas\" height=\"640\" width=\"640\" color=\"#d2ff40\" />\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\nconst titleElement = document.getElementById(\"title\");\nReactDOM.render(<Header />, titleElement);\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}